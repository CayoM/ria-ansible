# ---
- name: Get public IP
  ansible.builtin.shell: curl -s http://checkip.amazonaws.com
  register: ec2_public_ip

- name: wait 10 sec
  ansible.builtin.command: sleep 10

########################
# Networksegment
########################
- name: Create network segment with palmctl
  ansible.builtin.shell: |
    cat << EOM | palmctl create networksegment -f -
    name: {{ app_namespace }}
    compatibility_set: RHSI
    service_sync: {{ hcm_service_sync_value }}
    resource_group_id: default-infra
    EOM
  register: create_networksegment
  failed_when: >
    create_networksegment.rc != 0 and ('already exists' not in create_networksegment.stdout)

- name: Check if networksegment exists
  ansible.builtin.command:
    cmd: palmctl get networksegment --name {{ app_namespace }}
  register: networksegment_check

- name: Parse palmctl output once
  ansible.builtin.set_fact:
    ns_parsed: "{{ networksegment_check.stdout | from_yaml }}"

- name: Extract existing networksegment_id from palmctl get output
  ansible.builtin.set_fact:
    hcm_networksegment_id: >-
      {{
        (
          ns_parsed.network_segments | default([])
          | selectattr('name', 'equalto', app_namespace)
          | map(attribute='resource_id')
          | first
        )
        | default(ns_parsed.resource_id)
      }}




########################
# Cloud
########################
- name: Register cloud in Mesh
  ansible.builtin.shell: |
    cat << EOM | palmctl create cloud -f -
    name: {{ hcm_cloud_name }}
    type: {{ hcm_cloud_type }}
    is_private: {{ hcm_cloud_is_private | lower }}
    resource_group_id: default-infra
    EOM
  register: hcm_cloud_result
  failed_when: >
    hcm_cloud_result.rc != 0 and 'duplicate entry' not in hcm_cloud_result.stdout

- name: Extract resource_id from hcm_cloud_result output
  when: hcm_cloud_result.rc != 0 and ('duplicate entry' in hcm_cloud_result.stdout)
  ansible.builtin.set_fact:
    hcm_cloud_id: "{{ hcm_cloud_result.stdout | regex_search('resource_id: (.+)', '\\1') }}"

- name: Get existing cloud if already exists
  when: hcm_cloud_result.rc != 0 and ('duplicate entry' in hcm_cloud_result.stdout)
  ansible.builtin.shell: palmctl get clouds
  register: existing_clouds

- name: Extract resource_id from existing cloud
  when: hcm_cloud_result.rc != 0 and ('duplicate entry' in hcm_cloud_result.stdout)
  ansible.builtin.set_fact:
    hcm_cloud_id: >-
      {{
        (existing_clouds.stdout | from_yaml).clouds
        | selectattr('name', 'equalto', hcm_cloud_name)
        | map(attribute='resource_id')
        | first
      }}


########################
# Cloud Location
########################
- name: Register cloud location (may already exist)
  ansible.builtin.shell: |
    cat << EOM | palmctl create location --cloud-name {{ hcm_cloud_name }} -f -
    name: {{ hcm_location_name }}
    type: {{ hcm_location_type }}
    is_multi_zone: {{ hcm_location_is_multi_zone }}
    city: {{ hcm_location_city }}
    region: {{ hcm_location_region }}
    country: {{ hcm_location_country }}
    geo_coordinates: {{ hcm_location_geo_code }}
    EOM
  register: hcm_location_result
  failed_when: hcm_location_result.rc != 0 and ('duplicate entry' not in hcm_location_result.stdout)

- name: Get existing location if duplicate entry
  when: hcm_location_result.rc != 0 and ('duplicate entry' in hcm_location_result.stdout)
  ansible.builtin.shell: palmctl get locations --cloud-name {{ hcm_cloud_name }}
  register: hcm_existing_locations

- name: Extract location_id from existing location
  when: hcm_location_result.rc != 0 and ('duplicate entry' in hcm_location_result.stdout)
  ansible.builtin.set_fact:
    hcm_cluster_location_id: >-
      {{
        (hcm_existing_locations.stdout | from_yaml).locations
        | selectattr('name', 'equalto', hcm_location_name)
        | map(attribute='resource_id')
        | first
      }}

- name: Extract location_id from create output (if creation successful)
  when: hcm_location_result.rc == 0
  ansible.builtin.set_fact:
    hcm_cluster_location_id: "{{ (hcm_location_result.stdout | regex_findall('resource_id: (.+)')) | first }}"


########################
# Cluster
########################
- name: Register cluster
  ansible.builtin.shell: |
    cat << EOM | palmctl create cluster --cloud-name {{ hcm_cloud_name }} -f -
    name: {{ hcm_cluster_name }}
    location_id: {{ hcm_cluster_location_id }}
    type: {{ hcm_cluster_type }}
    is_multi_zone: {{ hcm_cluster_is_multi_zone | lower }}
    api_end_point: https://{{ ec2_public_ip.stdout }}:6443
    auto_discover: {{ hcm_cluster_auto_discover | lower }}
    resource_group_id: default-infra
    EOM
  register: hcm_cluster_result
  failed_when: >
    hcm_cluster_result.rc != 0 and ('duplicate entry' not in hcm_cluster_result.stdout)

- name: Extract cluster_id from hcm_cluster_result output
  when: hcm_cluster_result.rc == 0
  ansible.builtin.set_fact:
    hcm_cluster_id: "{{ hcm_cluster_result.stdout | regex_findall('resource_id: (.+)', '\\1') | first }}"


- name: Get existing clusters if already exists
  when: hcm_cluster_result.rc != 0 and ('duplicate entry' in hcm_cluster_result.stdout)
  ansible.builtin.shell: palmctl get clusters --cloud-name {{ hcm_cloud_name }}
  register: hcm_existing_clusters

- name: Extract cluster_id from existing clusters
  when: hcm_cluster_result.rc != 0 and ('duplicate entry' in hcm_cluster_result.stdout)
  ansible.builtin.set_fact:
    hcm_cluster_id: >-
      {{
        (hcm_existing_clusters.stdout | from_yaml).clusters
        | selectattr('name', 'equalto', hcm_cluster_name)
        | map(attribute='resource_id')
        | first
      }}

########################
# Gateways
########################
- name: Get existing gateways
  ansible.builtin.shell: palmctl get gateways
  register: hcm_existing_gateways

- name: Extract gateway_id from existing gateways
  ansible.builtin.set_fact:
    hcm_gateway_id: >-
      {{
        (hcm_existing_gateways.stdout | from_yaml).gateways
        | selectattr('name', 'equalto', hcm_agent_name)
        | map(attribute='resource_id')
        | first
      }}

########################
# Namespace
########################
- name: Register namespace for cluster (only if not autodiscovered)
  ansible.builtin.shell: |
    cat << EOM | palmctl create namespace --cloud-name {{ hcm_cloud_name }} --cluster-name {{ hcm_cluster_name }} -f -
    name: {{ app_namespace }}
    network_segment_id: {{ hcm_networksegment_id }}
    gateway_id: {{ hcm_gateway_id }}
    resource_group_id: default-infra
    EOM
  when: not hcm_cluster_auto_discover
  register: hcm_namespace_result
  failed_when: >
    hcm_namespace_result.rc != 0 and 'is already associated with' not in hcm_namespace_result.stdout
