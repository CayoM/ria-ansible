# tasks file for configure_instana_application
- name: Check if Terraform is already installed
  ansible.builtin.command: terraform version
  register: terraform_check
  ignore_errors: true
  changed_when: false

- name: Download and Install Terraform
  when: terraform_check.rc != 0
  block:
    - name: Linux/Unix | Find all versions of Terraform
      ansible.builtin.uri:
        url: https://releases.hashicorp.com/terraform/index.json
        return_content: true
      register: terraform_index
      when: terraform_version == "latest"
      check_mode: false

    - name: Linux/Unix | Finds the latest Terraform version when latest var is define
      ansible.builtin.set_fact:
        __terraform_version: "{{ (terraform_index.content | from_json).versions | reject('search', '-') | list | sort_versions | last }}"
      when: terraform_version == 'latest'

    - name: Linux/Unix | Use the specified Terraform version when latest var is not define
      ansible.builtin.set_fact:
        __terraform_version: "{{ terraform_version }}"
      when: terraform_version != 'latest'

    - name: Linux/Unix | Install Terraform
      ansible.builtin.unarchive:
        src: "{{ terraform_pkg_url }}"
        dest: "/usr/local/bin/"
        remote_src: true


- name: Create needed dir
  ansible.builtin.file:
    path: "/tmp/instana/"
    state: directory

- name: Copy Files to dir
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/tmp/instana/"
  loop:
    - main.tf
    - variables.tf

- name: Create Template for variable
  ansible.builtin.template:
    src: terraform.tfvars.j2
    dest: "/tmp/instana/terraform.tfvars"

- name: Terraform Init
  ansible.builtin.command: terraform init
  args:
    chdir: "/tmp/instana/"

- name: Terraform Apply plan
  ansible.builtin.command: terraform apply -auto-approve
  args:
    chdir: "/tmp/instana/"
  failed_when: false