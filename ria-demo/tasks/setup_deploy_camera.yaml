# Deployment of the Example App: https://github.com/skupperproject/skupper-example-hello-world
- name: Ensure Camera App namespace exists
  ansible.builtin.shell: |
    kubectl get namespace {{ app_namespace }} >/dev/null 2>&1 || \
    kubectl create namespace {{ app_namespace }}
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml


- name: Camera App Backend Setup
  when: service_type == 'backend' or service_type == 'full'
  block:
    - name: Create Camera App backend ConfigMap
      ansible.builtin.shell: |
        kubectl apply -n {{ app_namespace }} -f - <<EOF
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: camera-backend-app-cm
        data:
          app.py: |
            from flask import Flask, Response, render_template_string
            import cv2

            app = Flask(__name__)

            def gen():
                cap = cv2.VideoCapture(0)
                if not cap.isOpened():
                    raise RuntimeError('Could not open video device')
                while True:
                    ret, frame = cap.read()
                    if not ret:
                        break
                    # encode as jpeg
                    ret, jpeg = cv2.imencode('.jpg', frame)
                    if not ret:
                        continue
                    yield (b'--frame\r\n'
                          b'Content-Type: image/jpeg\r\n\r\n' + jpeg.tobytes() + b'\r\n')
                cap.release()

            @app.route('/video_feed')
            def video_feed():
                return Response(gen(), mimetype='multipart/x-mixed-replace; boundary=frame')

            @app.route('/')
            def index():
                # Simple human-readable page for debug if accessed directly
                return render_template_string('<html><body><h1>Backend: webcam stream</h1><img src="/video_feed"></body></html>')

            if __name__ == '__main__':
                # listen on 0.0.0.0 so other pods can reach it
                app.run(host='0.0.0.0', port=5000)
        EOF
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml

    - name: Create Camera App backend deployment
      ansible.builtin.shell: |
        kubectl apply -n {{ app_namespace }} -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: camera-backend
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: camera-backend
          template:
            metadata:
              labels:
                app: camera-backend
            spec:
              # Service account / permissions not required for this demo
              containers:
              - name: backend
                image: python:3.11-slim
                securityContext:
                    privileged: true
                command: ["sh", "-c"]
                args:
                  - apt-get update && apt-get install -y ffmpeg libsm6 libxext6 && pip install --no-cache-dir flask opencv-python-headless && python /app/app.py
                ports:
                - containerPort: 5000
                volumeMounts:
                - name: app-code
                  mountPath: /app
                - name: video0
                  mountPath: /dev/video0
              volumes:
              - name: app-code
                configMap:
                  name: camera-backend-app-cm
                  defaultMode: 420
              - name: video0
                hostPath:
                  path: /dev/video0
                  type: CharDevice
        EOF
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml

    - name: Expose Camera App backend service
      ansible.builtin.shell: |
        kubectl expose deployment camera-backend \
          --port=5000 --target-port=5000 \
          --name=camera-backend --type=ClusterIP -n {{ app_namespace }} || true
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml


- name: Camera App Frontend Setup
  when: service_type == 'frontend'  or service_type == 'full'
  block:
    - name: Create Camera App frontend ConfigMap
      ansible.builtin.shell: |
        kubectl apply -n {{ app_namespace }} -f - <<EOF
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: frontend-files-cm
        data:
          index.html: |
            <!doctype html>
            <html>
            <head>
              <meta charset="utf-8" />
              <title>Webcam Demo Frontend</title>
              <style>body{display:flex;flex-direction:column;align-items:center;padding:1rem;font-family:sans-serif} img{max-width:90%;height:auto;border:1px solid #ddd;border-radius:8px}</style>
            </head>
            <body>
              <h1>Webcam feed (proxied)</h1>
              <p>The image below is an MJPEG stream proxied by this frontend from the backend service.</p>
              <img id="cam" src="/video_feed" alt="webcam feed" />
            </body>
            </html>
          nginx.conf: |
            worker_processes  1;
            error_log /var/log/nginx/error.log warn;
            pid /var/run/nginx.pid;
            events { worker_connections 1024; }
            http {
              sendfile on;
              tcp_nopush on;
              server {
                listen 80;
                location / {
                  root /usr/share/nginx/html;
                  index index.html;
                }
                # Proxy MJPEG stream to backend service inside the cluster
                location /video_feed {
                  # upstream backend service name: backend-service on port 5000
                  proxy_pass http://camera-backend:5000/video_feed;
                  proxy_http_version 1.1;
                  proxy_buffering off;
                  proxy_request_buffering off;
                  # Preserve long-lived connections
                  proxy_set_header Connection "keep-alive";
                  chunked_transfer_encoding off;
                }
              }
            }
        EOF
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml

    - name: Create Camera App frontend deployment
      ansible.builtin.shell: |
        kubectl apply -n {{ app_namespace }} -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: camera-frontend
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: camera-frontend
          template:
            metadata:
              labels:
                app: camera-frontend
            spec:
              containers:
              - name: nginx
                image: nginx:stable
                ports:
                - containerPort: 80
                volumeMounts:
                - name: frontend-files
                  mountPath: /usr/share/nginx/html
                - name: nginx-conf
                  mountPath: /etc/nginx/nginx.conf
                  subPath: nginx.conf
              volumes:
              - name: frontend-files
                configMap:
                  name: frontend-files-cm
                  items:
                    - key: index.html
                      path: index.html
              - name: nginx-conf
                configMap:
                  name: frontend-files-cm
                  items:
                    - key: nginx.conf
                      path: nginx.conf
        EOF
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml

    - name: Expose Camera App frontend service
      ansible.builtin.shell: |
        kubectl apply -n {{ app_namespace }} -f - <<EOF
        apiVersion: v1
        kind: Service
        metadata:
          name: frontend-service
        spec:
          selector:
            app: camera-frontend
          ports:
          - protocol: TCP
            port: 80
            targetPort: 80
            nodePort: 30080
          type: NodePort
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml

    - name: Create Ingress for Camera App
      ansible.builtin.shell: |
        kubectl apply -n {{ app_namespace }} -f - <<EOF
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: camera-ingress
          annotations:
            traefik.ingress.kubernetes.io/router.entrypoints: web
        spec:
          rules:
            - http:
                paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: camera-frontend
                        port:
                          number: 80
        EOF
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
