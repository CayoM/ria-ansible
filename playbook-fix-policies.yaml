---
- name: Pick one backend host
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Fail early if group is empty
      ansible.builtin.assert:
        that:
          - groups['role_backend'] | length > 0
        fail_msg: "No hosts in group 'role_backend'."

    - name: Choose a random backend host
      ansible.builtin.set_fact:
        chosen_host: "{{ groups['role_backend'] | random }}"

    - name: Add chosen host to group 'chosen'
      ansible.builtin.add_host:
        name: "{{ chosen_host }}"
        groups: chosen
        ansible_user: ubuntu

- name: Ensure Mesh policy exists on the chosen backend
  hosts: chosen
  become: true
  gather_facts: false
  vars:
    palmctl_file_name: palmctl_latest_amd64.deb
    palmctl_download_url: "https://github.com/IBM/palmctl/releases/latest/download/{{ palmctl_file_name }}"
    palmctl_local_path: "/tmp"
    mesh_api_key: ""
    mesh_endpoint_url: "https://app.hybridcloudmesh.ibm.com"

    policy_name_prefix: "allow-front-to"
    microservice_name: ""
    resource_group_id: "default-app"
    network_segment_name: "super-automation-demo"

  tasks:
    - name: Check palmctl installation
      ansible.builtin.shell: palmctl --version
      register: palmctl_check
      changed_when: false
      failed_when: false

    - name: Setup Pre-Reqs
      when: palmctl_check.rc != 0
      block:
        - name: Download palmctl .deb package
          ansible.builtin.get_url:
            url: "{{ palmctl_download_url }}"
            dest: "{{ palmctl_local_path }}"
            mode: '0644'
            force: true

        - name: Install palmctl .deb package
          ansible.builtin.apt:
            deb: "{{ palmctl_local_path }}/{{ palmctl_file_name }}"
            state: present
            update_cache: false

        - name: Check palmctl version
          ansible.builtin.shell: palmctl --version
          register: version_result
          changed_when: false

        - name: Display palmctl version
          ansible.builtin.debug:
            msg: "Installed palmctl version: {{ version_result.stdout }}"

        - name: Configure palmctl user token (Mesh API key)
          ansible.builtin.shell: |
            palmctl config user --token {{ mesh_api_key }}
          register: palmctl_config_user
          changed_when: "'Successfully configured' in palmctl_config_user.stdout or palmctl_config_user.rc == 0"

        - name: Configure palmctl endpoint
          ansible.builtin.shell: |
            palmctl config endpoint --url {{ mesh_endpoint_url }}
          register: palmctl_config_endpoint
          changed_when: "'Successfully configured' in palmctl_config_endpoint.stdout or palmctl_config_endpoint.rc == 0"


    - name: Check if policy exists
      ansible.builtin.command:
        cmd: palmctl get policy --name {{ policy_name_prefix }}-{{ microservice_name }}
      register: policy_check
      changed_when: false
      failed_when: false

    - name: Create Policy
      when: policy_check.rc != 0
      block:
        - name: Check if networksegment exists
          ansible.builtin.command:
            cmd: palmctl get networksegment --name {{ network_segment_name }}
          register: networksegment_check
          changed_when: false

        - name: Parse palmctl output once
          ansible.builtin.set_fact:
            ns_parsed: "{{ networksegment_check.stdout | from_yaml }}"

        - name: Extract existing networksegment_id from palmctl get output
          ansible.builtin.set_fact:
            hcm_networksegment_id: >-
              {{
                (
                  ns_parsed.network_segments | default([])
                  | selectattr('name', 'equalto', network_segment_name)
                  | map(attribute='resource_id')
                  | first
                )
                | default(ns_parsed.resource_id)
              }}

        - name: Check if service exists
          ansible.builtin.command:
            cmd: palmctl get service --application-name {{ microservice_name }} --name {{ microservice_name }}
          register: service_check
          changed_when: false

        - name: Parse palmctl output once
          ansible.builtin.set_fact:
            service_parsed: "{{ service_check.stdout | from_yaml }}"

        - name: Extract existing resource_id from palmctl get output
          ansible.builtin.set_fact:
            service_id: >-
              {{
                (
                  service_parsed.services | default([])
                  | selectattr('name', 'equalto', microservice_name)
                  | map(attribute='resource_id')
                  | first
                )
                | default(service_parsed.resource_id)
              }}

        - name: Extract existing application_id from palmctl get output
          ansible.builtin.set_fact:
            application_id: >-
              {{
                (
                  service_parsed.services | default([])
                  | selectattr('name', 'equalto', microservice_name)
                  | map(attribute='application_id')
                  | first
                )
                | default(service_parsed.application_id)
              }}

        - name: Create policy if missing
          when: policy_check.rc != 0
          ansible.builtin.shell: |
            cat << EOM | palmctl create policy -f -
            name: {{ policy_name_prefix }}-{{ microservice_name }}
            description: ""
            resource_group_id: {{ resource_group_id }}
            network_segment_id: {{ hcm_networksegment_id }}
            action: "allow"
            from:
              type: networkSegment
              network_segment:
                network_segment_id: {{ hcm_networksegment_id }}
            to:
              type: service
              service:
                service_id: {{ service_id }}
                application_id: {{ application_id }}
            EOM
          register: policy_create
          failed_when: >
            policy_create.rc != 0 and 'already exists' not in policy_create.stdout


